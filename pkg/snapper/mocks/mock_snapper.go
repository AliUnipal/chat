// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewSnapper creates a new instance of Snapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSnapper[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *Snapper[T] {
	mock := &Snapper[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Snapper is an autogenerated mock type for the Snapper type
type Snapper[T any] struct {
	mock.Mock
}

type Snapper_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *Snapper[T]) EXPECT() *Snapper_Expecter[T] {
	return &Snapper_Expecter[T]{mock: &_m.Mock}
}

// Load provides a mock function for the type Snapper
func (_mock *Snapper[T]) Load(ctx context.Context) (T, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (T, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) T); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Snapper_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type Snapper_Load_Call[T any] struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Snapper_Expecter[T]) Load(ctx interface{}) *Snapper_Load_Call[T] {
	return &Snapper_Load_Call[T]{Call: _e.mock.On("Load", ctx)}
}

func (_c *Snapper_Load_Call[T]) Run(run func(ctx context.Context)) *Snapper_Load_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Snapper_Load_Call[T]) Return(v T, err error) *Snapper_Load_Call[T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Snapper_Load_Call[T]) RunAndReturn(run func(ctx context.Context) (T, error)) *Snapper_Load_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Snap provides a mock function for the type Snapper
func (_mock *Snapper[T]) Snap(ctx context.Context, data T) error {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Snap")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, T) error); ok {
		r0 = returnFunc(ctx, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Snapper_Snap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Snap'
type Snapper_Snap_Call[T any] struct {
	*mock.Call
}

// Snap is a helper method to define mock.On call
//   - ctx context.Context
//   - data T
func (_e *Snapper_Expecter[T]) Snap(ctx interface{}, data interface{}) *Snapper_Snap_Call[T] {
	return &Snapper_Snap_Call[T]{Call: _e.mock.On("Snap", ctx, data)}
}

func (_c *Snapper_Snap_Call[T]) Run(run func(ctx context.Context, data T)) *Snapper_Snap_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 T
		if args[1] != nil {
			arg1 = args[1].(T)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Snapper_Snap_Call[T]) Return(err error) *Snapper_Snap_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *Snapper_Snap_Call[T]) RunAndReturn(run func(ctx context.Context, data T) error) *Snapper_Snap_Call[T] {
	_c.Call.Return(run)
	return _c
}
