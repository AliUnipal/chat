// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/AliUnipal/chat/internal/service/msgsvc/msgrepos"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MessageRepository is an autogenerated mock type for the messageRepository type
type MessageRepository struct {
	mock.Mock
}

type MessageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageRepository) EXPECT() *MessageRepository_Expecter {
	return &MessageRepository_Expecter{mock: &_m.Mock}
}

// CreateMessage provides a mock function for the type MessageRepository
func (_mock *MessageRepository) CreateMessage(ctx context.Context, in msgrepos.CreateMessageInput) error {
	ret := _mock.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, msgrepos.CreateMessageInput) error); ok {
		r0 = returnFunc(ctx, in)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MessageRepository_CreateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMessage'
type MessageRepository_CreateMessage_Call struct {
	*mock.Call
}

// CreateMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - in msgrepos.CreateMessageInput
func (_e *MessageRepository_Expecter) CreateMessage(ctx interface{}, in interface{}) *MessageRepository_CreateMessage_Call {
	return &MessageRepository_CreateMessage_Call{Call: _e.mock.On("CreateMessage", ctx, in)}
}

func (_c *MessageRepository_CreateMessage_Call) Run(run func(ctx context.Context, in msgrepos.CreateMessageInput)) *MessageRepository_CreateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 msgrepos.CreateMessageInput
		if args[1] != nil {
			arg1 = args[1].(msgrepos.CreateMessageInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MessageRepository_CreateMessage_Call) Return(err error) *MessageRepository_CreateMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MessageRepository_CreateMessage_Call) RunAndReturn(run func(ctx context.Context, in msgrepos.CreateMessageInput) error) *MessageRepository_CreateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessages provides a mock function for the type MessageRepository
func (_mock *MessageRepository) GetMessages(ctx context.Context, chatID uuid.UUID) ([]msgrepos.Message, error) {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []msgrepos.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]msgrepos.Message, error)); ok {
		return returnFunc(ctx, chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []msgrepos.Message); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]msgrepos.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MessageRepository_GetMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessages'
type MessageRepository_GetMessages_Call struct {
	*mock.Call
}

// GetMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID uuid.UUID
func (_e *MessageRepository_Expecter) GetMessages(ctx interface{}, chatID interface{}) *MessageRepository_GetMessages_Call {
	return &MessageRepository_GetMessages_Call{Call: _e.mock.On("GetMessages", ctx, chatID)}
}

func (_c *MessageRepository_GetMessages_Call) Run(run func(ctx context.Context, chatID uuid.UUID)) *MessageRepository_GetMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MessageRepository_GetMessages_Call) Return(messages []msgrepos.Message, err error) *MessageRepository_GetMessages_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MessageRepository_GetMessages_Call) RunAndReturn(run func(ctx context.Context, chatID uuid.UUID) ([]msgrepos.Message, error)) *MessageRepository_GetMessages_Call {
	_c.Call.Return(run)
	return _c
}
