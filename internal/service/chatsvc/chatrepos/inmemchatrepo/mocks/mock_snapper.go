// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/AliUnipal/chat/internal/service/chatsvc/chatrepos"
	mock "github.com/stretchr/testify/mock"
)

// NewSnapper creates a new instance of Snapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSnapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Snapper {
	mock := &Snapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Snapper is an autogenerated mock type for the snapper type
type Snapper struct {
	mock.Mock
}

type Snapper_Expecter struct {
	mock *mock.Mock
}

func (_m *Snapper) EXPECT() *Snapper_Expecter {
	return &Snapper_Expecter{mock: &_m.Mock}
}

// Load provides a mock function for the type Snapper
func (_mock *Snapper) Load(ctx context.Context) (chatrepos.Data, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 chatrepos.Data
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (chatrepos.Data, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) chatrepos.Data); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(chatrepos.Data)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Snapper_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type Snapper_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Snapper_Expecter) Load(ctx interface{}) *Snapper_Load_Call {
	return &Snapper_Load_Call{Call: _e.mock.On("Load", ctx)}
}

func (_c *Snapper_Load_Call) Run(run func(ctx context.Context)) *Snapper_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Snapper_Load_Call) Return(data chatrepos.Data, err error) *Snapper_Load_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *Snapper_Load_Call) RunAndReturn(run func(ctx context.Context) (chatrepos.Data, error)) *Snapper_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Snap provides a mock function for the type Snapper
func (_mock *Snapper) Snap(ctx context.Context, data chatrepos.Data) error {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Snap")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, chatrepos.Data) error); ok {
		r0 = returnFunc(ctx, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Snapper_Snap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Snap'
type Snapper_Snap_Call struct {
	*mock.Call
}

// Snap is a helper method to define mock.On call
//   - ctx context.Context
//   - data chatrepos.Data
func (_e *Snapper_Expecter) Snap(ctx interface{}, data interface{}) *Snapper_Snap_Call {
	return &Snapper_Snap_Call{Call: _e.mock.On("Snap", ctx, data)}
}

func (_c *Snapper_Snap_Call) Run(run func(ctx context.Context, data chatrepos.Data)) *Snapper_Snap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 chatrepos.Data
		if args[1] != nil {
			arg1 = args[1].(chatrepos.Data)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Snapper_Snap_Call) Return(err error) *Snapper_Snap_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Snapper_Snap_Call) RunAndReturn(run func(ctx context.Context, data chatrepos.Data) error) *Snapper_Snap_Call {
	_c.Call.Return(run)
	return _c
}
