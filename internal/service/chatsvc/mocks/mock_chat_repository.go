// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/AliUnipal/chat/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockChatRepository is an autogenerated mock type for the ChatRepository type
type MockChatRepository struct {
	mock.Mock
}

type MockChatRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChatRepository) EXPECT() *MockChatRepository_Expecter {
	return &MockChatRepository_Expecter{mock: &_m.Mock}
}

// CreateDirectChat provides a mock function with given fields: ctx, chat
func (_m *MockChatRepository) CreateDirectChat(ctx context.Context, chat models.DirectChat) (uuid.UUID, error) {
	ret := _m.Called(ctx, chat)

	if len(ret) == 0 {
		panic("no return value specified for CreateDirectChat")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DirectChat) (uuid.UUID, error)); ok {
		return rf(ctx, chat)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DirectChat) uuid.UUID); ok {
		r0 = rf(ctx, chat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DirectChat) error); ok {
		r1 = rf(ctx, chat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatRepository_CreateDirectChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDirectChat'
type MockChatRepository_CreateDirectChat_Call struct {
	*mock.Call
}

// CreateDirectChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chat models.DirectChat
func (_e *MockChatRepository_Expecter) CreateDirectChat(ctx interface{}, chat interface{}) *MockChatRepository_CreateDirectChat_Call {
	return &MockChatRepository_CreateDirectChat_Call{Call: _e.mock.On("CreateDirectChat", ctx, chat)}
}

func (_c *MockChatRepository_CreateDirectChat_Call) Run(run func(ctx context.Context, chat models.DirectChat)) *MockChatRepository_CreateDirectChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DirectChat))
	})
	return _c
}

func (_c *MockChatRepository_CreateDirectChat_Call) Return(_a0 uuid.UUID, _a1 error) *MockChatRepository_CreateDirectChat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChatRepository_CreateDirectChat_Call) RunAndReturn(run func(context.Context, models.DirectChat) (uuid.UUID, error)) *MockChatRepository_CreateDirectChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatsByUserId provides a mock function with given fields: ctx, userId
func (_m *MockChatRepository) GetChatsByUserId(ctx context.Context, userId uuid.UUID) ([]models.DirectChat, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetChatsByUserId")
	}

	var r0 []models.DirectChat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.DirectChat, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.DirectChat); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DirectChat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatRepository_GetChatsByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatsByUserId'
type MockChatRepository_GetChatsByUserId_Call struct {
	*mock.Call
}

// GetChatsByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockChatRepository_Expecter) GetChatsByUserId(ctx interface{}, userId interface{}) *MockChatRepository_GetChatsByUserId_Call {
	return &MockChatRepository_GetChatsByUserId_Call{Call: _e.mock.On("GetChatsByUserId", ctx, userId)}
}

func (_c *MockChatRepository_GetChatsByUserId_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockChatRepository_GetChatsByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockChatRepository_GetChatsByUserId_Call) Return(_a0 []models.DirectChat, _a1 error) *MockChatRepository_GetChatsByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChatRepository_GetChatsByUserId_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]models.DirectChat, error)) *MockChatRepository_GetChatsByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: ctx, userId
func (_m *MockChatRepository) GetUserById(ctx context.Context, userId uuid.UUID) (models.User, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.User); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatRepository_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockChatRepository_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockChatRepository_Expecter) GetUserById(ctx interface{}, userId interface{}) *MockChatRepository_GetUserById_Call {
	return &MockChatRepository_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, userId)}
}

func (_c *MockChatRepository_GetUserById_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockChatRepository_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockChatRepository_GetUserById_Call) Return(_a0 models.User, _a1 error) *MockChatRepository_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChatRepository_GetUserById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (models.User, error)) *MockChatRepository_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChatRepository creates a new instance of MockChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChatRepository {
	mock := &MockChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
