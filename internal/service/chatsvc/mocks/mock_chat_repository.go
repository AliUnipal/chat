// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/AliUnipal/chat/internal/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

type ChatRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ChatRepository) EXPECT() *ChatRepository_Expecter {
	return &ChatRepository_Expecter{mock: &_m.Mock}
}

// CreateChat provides a mock function for the type ChatRepository
func (_mock *ChatRepository) CreateChat(ctx context.Context, chat models.Chat) (uuid.UUID, error) {
	ret := _mock.Called(ctx, chat)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Chat) (uuid.UUID, error)); ok {
		return returnFunc(ctx, chat)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.Chat) uuid.UUID); ok {
		r0 = returnFunc(ctx, chat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.Chat) error); ok {
		r1 = returnFunc(ctx, chat)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ChatRepository_CreateChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChat'
type ChatRepository_CreateChat_Call struct {
	*mock.Call
}

// CreateChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chat models.Chat
func (_e *ChatRepository_Expecter) CreateChat(ctx interface{}, chat interface{}) *ChatRepository_CreateChat_Call {
	return &ChatRepository_CreateChat_Call{Call: _e.mock.On("CreateChat", ctx, chat)}
}

func (_c *ChatRepository_CreateChat_Call) Run(run func(ctx context.Context, chat models.Chat)) *ChatRepository_CreateChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.Chat
		if args[1] != nil {
			arg1 = args[1].(models.Chat)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ChatRepository_CreateChat_Call) Return(uUID uuid.UUID, err error) *ChatRepository_CreateChat_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *ChatRepository_CreateChat_Call) RunAndReturn(run func(ctx context.Context, chat models.Chat) (uuid.UUID, error)) *ChatRepository_CreateChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatsByUserId provides a mock function for the type ChatRepository
func (_mock *ChatRepository) GetChatsByUserId(ctx context.Context, userId uuid.UUID) ([]models.Chat, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetChatsByUserId")
	}

	var r0 []models.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Chat, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Chat); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Chat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ChatRepository_GetChatsByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatsByUserId'
type ChatRepository_GetChatsByUserId_Call struct {
	*mock.Call
}

// GetChatsByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *ChatRepository_Expecter) GetChatsByUserId(ctx interface{}, userId interface{}) *ChatRepository_GetChatsByUserId_Call {
	return &ChatRepository_GetChatsByUserId_Call{Call: _e.mock.On("GetChatsByUserId", ctx, userId)}
}

func (_c *ChatRepository_GetChatsByUserId_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *ChatRepository_GetChatsByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ChatRepository_GetChatsByUserId_Call) Return(Chats []models.Chat, err error) *ChatRepository_GetChatsByUserId_Call {
	_c.Call.Return(Chats, err)
	return _c
}

func (_c *ChatRepository_GetChatsByUserId_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID) ([]models.Chat, error)) *ChatRepository_GetChatsByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function for the type ChatRepository
func (_mock *ChatRepository) GetUserById(ctx context.Context, userId uuid.UUID) (models.User, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.User, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.User); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		r0 = ret.Get(0).(models.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ChatRepository_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type ChatRepository_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *ChatRepository_Expecter) GetUserById(ctx interface{}, userId interface{}) *ChatRepository_GetUserById_Call {
	return &ChatRepository_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, userId)}
}

func (_c *ChatRepository_GetUserById_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *ChatRepository_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ChatRepository_GetUserById_Call) Return(user models.User, err error) *ChatRepository_GetUserById_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *ChatRepository_GetUserById_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID) (models.User, error)) *ChatRepository_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}
