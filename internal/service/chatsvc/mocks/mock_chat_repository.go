// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/AliUnipal/chat/internal/service/chatsvc/chatrepos"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ChatRepository is an autogenerated mock type for the chatRepository type
type ChatRepository struct {
	mock.Mock
}

type ChatRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ChatRepository) EXPECT() *ChatRepository_Expecter {
	return &ChatRepository_Expecter{mock: &_m.Mock}
}

// CreateChat provides a mock function for the type ChatRepository
func (_mock *ChatRepository) CreateChat(ctx context.Context, chat chatrepos.CreateChatInput) error {
	ret := _mock.Called(ctx, chat)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, chatrepos.CreateChatInput) error); ok {
		r0 = returnFunc(ctx, chat)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ChatRepository_CreateChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChat'
type ChatRepository_CreateChat_Call struct {
	*mock.Call
}

// CreateChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chat chatrepos.CreateChatInput
func (_e *ChatRepository_Expecter) CreateChat(ctx interface{}, chat interface{}) *ChatRepository_CreateChat_Call {
	return &ChatRepository_CreateChat_Call{Call: _e.mock.On("CreateChat", ctx, chat)}
}

func (_c *ChatRepository_CreateChat_Call) Run(run func(ctx context.Context, chat chatrepos.CreateChatInput)) *ChatRepository_CreateChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 chatrepos.CreateChatInput
		if args[1] != nil {
			arg1 = args[1].(chatrepos.CreateChatInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ChatRepository_CreateChat_Call) Return(err error) *ChatRepository_CreateChat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ChatRepository_CreateChat_Call) RunAndReturn(run func(ctx context.Context, chat chatrepos.CreateChatInput) error) *ChatRepository_CreateChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatsByUser provides a mock function for the type ChatRepository
func (_mock *ChatRepository) GetChatsByUser(ctx context.Context, userID uuid.UUID) ([]*chatrepos.Chat, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatsByUser")
	}

	var r0 []*chatrepos.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*chatrepos.Chat, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*chatrepos.Chat); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chatrepos.Chat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ChatRepository_GetChatsByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatsByUser'
type ChatRepository_GetChatsByUser_Call struct {
	*mock.Call
}

// GetChatsByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *ChatRepository_Expecter) GetChatsByUser(ctx interface{}, userID interface{}) *ChatRepository_GetChatsByUser_Call {
	return &ChatRepository_GetChatsByUser_Call{Call: _e.mock.On("GetChatsByUser", ctx, userID)}
}

func (_c *ChatRepository_GetChatsByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *ChatRepository_GetChatsByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ChatRepository_GetChatsByUser_Call) Return(chats []*chatrepos.Chat, err error) *ChatRepository_GetChatsByUser_Call {
	_c.Call.Return(chats, err)
	return _c
}

func (_c *ChatRepository_GetChatsByUser_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) ([]*chatrepos.Chat, error)) *ChatRepository_GetChatsByUser_Call {
	_c.Call.Return(run)
	return _c
}
