// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewUserContext creates a new instance of UserContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserContext {
	mock := &UserContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserContext is an autogenerated mock type for the UserContext type
type UserContext struct {
	mock.Mock
}

type UserContext_Expecter struct {
	mock *mock.Mock
}

func (_m *UserContext) EXPECT() *UserContext_Expecter {
	return &UserContext_Expecter{mock: &_m.Mock}
}

// GetCurrentUserID provides a mock function for the type UserContext
func (_mock *UserContext) GetCurrentUserID(context1 context.Context) uuid.UUID {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUserID")
	}

	var r0 uuid.UUID
	if returnFunc, ok := ret.Get(0).(func(context.Context) uuid.UUID); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	return r0
}

// UserContext_GetCurrentUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUserID'
type UserContext_GetCurrentUserID_Call struct {
	*mock.Call
}

// GetCurrentUserID is a helper method to define mock.On call
//   - context1 context.Context
func (_e *UserContext_Expecter) GetCurrentUserID(context1 interface{}) *UserContext_GetCurrentUserID_Call {
	return &UserContext_GetCurrentUserID_Call{Call: _e.mock.On("GetCurrentUserID", context1)}
}

func (_c *UserContext_GetCurrentUserID_Call) Run(run func(context1 context.Context)) *UserContext_GetCurrentUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserContext_GetCurrentUserID_Call) Return(uUID uuid.UUID) *UserContext_GetCurrentUserID_Call {
	_c.Call.Return(uUID)
	return _c
}

func (_c *UserContext_GetCurrentUserID_Call) RunAndReturn(run func(context1 context.Context) uuid.UUID) *UserContext_GetCurrentUserID_Call {
	_c.Call.Return(run)
	return _c
}
