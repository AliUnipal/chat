// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/AliUnipal/chat/model"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewChatService creates a new instance of ChatService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatService {
	mock := &ChatService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ChatService is an autogenerated mock type for the ChatService type
type ChatService struct {
	mock.Mock
}

type ChatService_Expecter struct {
	mock *mock.Mock
}

func (_m *ChatService) EXPECT() *ChatService_Expecter {
	return &ChatService_Expecter{mock: &_m.Mock}
}

// CreateChat provides a mock function for the type ChatService
func (_mock *ChatService) CreateChat(ctx context.Context, participantID uuid.UUID) (uuid.UUID, error) {
	ret := _mock.Called(ctx, participantID)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (uuid.UUID, error)); ok {
		return returnFunc(ctx, participantID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) uuid.UUID); ok {
		r0 = returnFunc(ctx, participantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, participantID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ChatService_CreateChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChat'
type ChatService_CreateChat_Call struct {
	*mock.Call
}

// CreateChat is a helper method to define mock.On call
//   - ctx
//   - participantID
func (_e *ChatService_Expecter) CreateChat(ctx interface{}, participantID interface{}) *ChatService_CreateChat_Call {
	return &ChatService_CreateChat_Call{Call: _e.mock.On("CreateChat", ctx, participantID)}
}

func (_c *ChatService_CreateChat_Call) Run(run func(ctx context.Context, participantID uuid.UUID)) *ChatService_CreateChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ChatService_CreateChat_Call) Return(uUID uuid.UUID, err error) *ChatService_CreateChat_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *ChatService_CreateChat_Call) RunAndReturn(run func(ctx context.Context, participantID uuid.UUID) (uuid.UUID, error)) *ChatService_CreateChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessages provides a mock function for the type ChatService
func (_mock *ChatService) GetMessages(ctx context.Context, chatID uuid.UUID) ([]model.Message, error) {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []model.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.Message, error)); ok {
		return returnFunc(ctx, chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.Message); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ChatService_GetMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessages'
type ChatService_GetMessages_Call struct {
	*mock.Call
}

// GetMessages is a helper method to define mock.On call
//   - ctx
//   - chatID
func (_e *ChatService_Expecter) GetMessages(ctx interface{}, chatID interface{}) *ChatService_GetMessages_Call {
	return &ChatService_GetMessages_Call{Call: _e.mock.On("GetMessages", ctx, chatID)}
}

func (_c *ChatService_GetMessages_Call) Run(run func(ctx context.Context, chatID uuid.UUID)) *ChatService_GetMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ChatService_GetMessages_Call) Return(messages []model.Message, err error) *ChatService_GetMessages_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *ChatService_GetMessages_Call) RunAndReturn(run func(ctx context.Context, chatID uuid.UUID) ([]model.Message, error)) *ChatService_GetMessages_Call {
	_c.Call.Return(run)
	return _c
}

// SendTextMessage provides a mock function for the type ChatService
func (_mock *ChatService) SendTextMessage(ctx context.Context, chatID uuid.UUID, content string) (uuid.UUID, error) {
	ret := _mock.Called(ctx, chatID, content)

	if len(ret) == 0 {
		panic("no return value specified for SendTextMessage")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (uuid.UUID, error)); ok {
		return returnFunc(ctx, chatID, content)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) uuid.UUID); ok {
		r0 = returnFunc(ctx, chatID, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, chatID, content)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ChatService_SendTextMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTextMessage'
type ChatService_SendTextMessage_Call struct {
	*mock.Call
}

// SendTextMessage is a helper method to define mock.On call
//   - ctx
//   - chatID
//   - content
func (_e *ChatService_Expecter) SendTextMessage(ctx interface{}, chatID interface{}, content interface{}) *ChatService_SendTextMessage_Call {
	return &ChatService_SendTextMessage_Call{Call: _e.mock.On("SendTextMessage", ctx, chatID, content)}
}

func (_c *ChatService_SendTextMessage_Call) Run(run func(ctx context.Context, chatID uuid.UUID, content string)) *ChatService_SendTextMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ChatService_SendTextMessage_Call) Return(uUID uuid.UUID, err error) *ChatService_SendTextMessage_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *ChatService_SendTextMessage_Call) RunAndReturn(run func(ctx context.Context, chatID uuid.UUID, content string) (uuid.UUID, error)) *ChatService_SendTextMessage_Call {
	_c.Call.Return(run)
	return _c
}
