// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/AliUnipal/chat/model"
	"github.com/AliUnipal/chat/service"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

type ChatRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ChatRepository) EXPECT() *ChatRepository_Expecter {
	return &ChatRepository_Expecter{mock: &_m.Mock}
}

// CreateChat provides a mock function for the type ChatRepository
func (_mock *ChatRepository) CreateChat(ctx context.Context, chat model.Chat) (uuid.UUID, error) {
	ret := _mock.Called(ctx, chat)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Chat) (uuid.UUID, error)); ok {
		return returnFunc(ctx, chat)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Chat) uuid.UUID); ok {
		r0 = returnFunc(ctx, chat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.Chat) error); ok {
		r1 = returnFunc(ctx, chat)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ChatRepository_CreateChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChat'
type ChatRepository_CreateChat_Call struct {
	*mock.Call
}

// CreateChat is a helper method to define mock.On call
//   - ctx
//   - chat
func (_e *ChatRepository_Expecter) CreateChat(ctx interface{}, chat interface{}) *ChatRepository_CreateChat_Call {
	return &ChatRepository_CreateChat_Call{Call: _e.mock.On("CreateChat", ctx, chat)}
}

func (_c *ChatRepository_CreateChat_Call) Run(run func(ctx context.Context, chat model.Chat)) *ChatRepository_CreateChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Chat))
	})
	return _c
}

func (_c *ChatRepository_CreateChat_Call) Return(uUID uuid.UUID, err error) *ChatRepository_CreateChat_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *ChatRepository_CreateChat_Call) RunAndReturn(run func(ctx context.Context, chat model.Chat) (uuid.UUID, error)) *ChatRepository_CreateChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatByID provides a mock function for the type ChatRepository
func (_mock *ChatRepository) GetChatByID(ctx context.Context, chatID uuid.UUID) (service.ChatWithMessages, error) {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatByID")
	}

	var r0 service.ChatWithMessages
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (service.ChatWithMessages, error)); ok {
		return returnFunc(ctx, chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) service.ChatWithMessages); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		r0 = ret.Get(0).(service.ChatWithMessages)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ChatRepository_GetChatByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatByID'
type ChatRepository_GetChatByID_Call struct {
	*mock.Call
}

// GetChatByID is a helper method to define mock.On call
//   - ctx
//   - chatID
func (_e *ChatRepository_Expecter) GetChatByID(ctx interface{}, chatID interface{}) *ChatRepository_GetChatByID_Call {
	return &ChatRepository_GetChatByID_Call{Call: _e.mock.On("GetChatByID", ctx, chatID)}
}

func (_c *ChatRepository_GetChatByID_Call) Run(run func(ctx context.Context, chatID uuid.UUID)) *ChatRepository_GetChatByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ChatRepository_GetChatByID_Call) Return(chatWithMessages service.ChatWithMessages, err error) *ChatRepository_GetChatByID_Call {
	_c.Call.Return(chatWithMessages, err)
	return _c
}

func (_c *ChatRepository_GetChatByID_Call) RunAndReturn(run func(ctx context.Context, chatID uuid.UUID) (service.ChatWithMessages, error)) *ChatRepository_GetChatByID_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function for the type ChatRepository
func (_mock *ChatRepository) SendMessage(ctx context.Context, message model.Message) (uuid.UUID, error) {
	ret := _mock.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Message) (uuid.UUID, error)); ok {
		return returnFunc(ctx, message)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.Message) uuid.UUID); ok {
		r0 = returnFunc(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.Message) error); ok {
		r1 = returnFunc(ctx, message)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ChatRepository_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type ChatRepository_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx
//   - message
func (_e *ChatRepository_Expecter) SendMessage(ctx interface{}, message interface{}) *ChatRepository_SendMessage_Call {
	return &ChatRepository_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, message)}
}

func (_c *ChatRepository_SendMessage_Call) Run(run func(ctx context.Context, message model.Message)) *ChatRepository_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Message))
	})
	return _c
}

func (_c *ChatRepository_SendMessage_Call) Return(uUID uuid.UUID, err error) *ChatRepository_SendMessage_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *ChatRepository_SendMessage_Call) RunAndReturn(run func(ctx context.Context, message model.Message) (uuid.UUID, error)) *ChatRepository_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}
