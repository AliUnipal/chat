// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/AliUnipal/chat/internal/models/chat"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewChatService creates a new instance of ChatService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatService {
	mock := &ChatService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ChatService is an autogenerated mock type for the chatService type
type ChatService struct {
	mock.Mock
}

type ChatService_Expecter struct {
	mock *mock.Mock
}

func (_m *ChatService) EXPECT() *ChatService_Expecter {
	return &ChatService_Expecter{mock: &_m.Mock}
}

// CreateChat provides a mock function for the type ChatService
func (_mock *ChatService) CreateChat(ctx context.Context, currentUserID uuid.UUID, otherUserID uuid.UUID) (uuid.UUID, error) {
	ret := _mock.Called(ctx, currentUserID, otherUserID)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (uuid.UUID, error)); ok {
		return returnFunc(ctx, currentUserID, otherUserID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) uuid.UUID); ok {
		r0 = returnFunc(ctx, currentUserID, otherUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, currentUserID, otherUserID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ChatService_CreateChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChat'
type ChatService_CreateChat_Call struct {
	*mock.Call
}

// CreateChat is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUserID uuid.UUID
//   - otherUserID uuid.UUID
func (_e *ChatService_Expecter) CreateChat(ctx interface{}, currentUserID interface{}, otherUserID interface{}) *ChatService_CreateChat_Call {
	return &ChatService_CreateChat_Call{Call: _e.mock.On("CreateChat", ctx, currentUserID, otherUserID)}
}

func (_c *ChatService_CreateChat_Call) Run(run func(ctx context.Context, currentUserID uuid.UUID, otherUserID uuid.UUID)) *ChatService_CreateChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ChatService_CreateChat_Call) Return(uUID uuid.UUID, err error) *ChatService_CreateChat_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *ChatService_CreateChat_Call) RunAndReturn(run func(ctx context.Context, currentUserID uuid.UUID, otherUserID uuid.UUID) (uuid.UUID, error)) *ChatService_CreateChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetChats provides a mock function for the type ChatService
func (_mock *ChatService) GetChats(ctx context.Context, userID uuid.UUID) ([]chat.Chat, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetChats")
	}

	var r0 []chat.Chat
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]chat.Chat, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []chat.Chat); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chat.Chat)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ChatService_GetChats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChats'
type ChatService_GetChats_Call struct {
	*mock.Call
}

// GetChats is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *ChatService_Expecter) GetChats(ctx interface{}, userID interface{}) *ChatService_GetChats_Call {
	return &ChatService_GetChats_Call{Call: _e.mock.On("GetChats", ctx, userID)}
}

func (_c *ChatService_GetChats_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *ChatService_GetChats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ChatService_GetChats_Call) Return(chats []chat.Chat, err error) *ChatService_GetChats_Call {
	_c.Call.Return(chats, err)
	return _c
}

func (_c *ChatService_GetChats_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) ([]chat.Chat, error)) *ChatService_GetChats_Call {
	_c.Call.Return(run)
	return _c
}
